name: Run Postman Tests Souvik

on:
  workflow_dispatch:  # Allows you to trigger this workflow manually from the GitHub Actions UI
    inputs:
      collection_path:
        description: 'Path to the Postman collection file'
        required: true
        type: string
      environment_path:
        description: 'Path to the Postman environment file'
        required: true
        type: string
      folders:
        description: 'Comma-separated list of folders to run in the Postman collection'
        required: true
        type: string

jobs:
  run-postman-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Checkout the repository code

    - name: Install dependencies
      run: |
        echo "Setting up Node.js"
        sudo apt-get update
        sudo apt-get install -y jq  # jq for processing JSON files
        npm install -g newman      # Install Newman globally

    - name: Run Postman collection tests
      id: postman-tests
      run: |
          echo "Running Postman tests..."
          
          collection_path="${{ github.workspace }}/${{ inputs.collection_path }}"
          environment_path="${{ github.workspace }}/${{ inputs.environment_path }}"
          
          echo "Collection Path: $collection_path"
          echo "Environment Path: $environment_path"
      
          folders=$(echo "${{ inputs.folders }}" | tr "," "\n")
          newman_output_file="newman_output.json"
      
          for folder in $folders; do
            echo "Running tests for folder: $folder"
            newman run "$collection_path" -e "$environment_path" --folder "$folder" -r json --reporter-json-export "$newman_output_file"
      
            ls -l "$newman_output_file"
            cat "$newman_output_file"
          done
      
          if [[ -f "$newman_output_file" && -s "$newman_output_file" ]]; then
            total_tests=$(jq '.run.stats.tests.total' $newman_output_file)
            failed_tests=$(jq '.run.stats.tests.failures' $newman_output_file)
      
            if [[ -z "$total_tests" || -z "$failed_tests" ]]; then
              echo "Error: Could not retrieve test statistics from JSON."
              exit 1
            fi
            
            echo "Total Tests: $total_tests"
            echo "Failed Tests: $failed_tests"
            passed_tests=$((total_tests - failed_tests))
            success_percentage=$((100 * passed_tests / total_tests))
      
            echo "Passed Tests: $passed_tests"
            echo "Success Percentage: $success_percentage%"
          else
            echo "Error: Output file does not exist or is empty."
            exit 1
          fi
      
          echo "Test-Result: $success_percentage%"

          # Set the output for the step for later reference
          echo "{test_result}={$success_percentage%}">> $GITHUB_OUTPUT

          echo "::notice::Test-Result: $success_percentage%"

          if [ $success_percentage -lt 80 ]; then
            echo "::warning::Test-Result: $success_percentage%"  # Warn if below threshold
          fi
      
          if [ $success_percentage -eq 100 ]; then
            echo "::success::Test-Result: $success_percentage%"  # Success annotation
          fi

    - name: Update summary with test results
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Total Tests: ${{ steps.postman-tests.outputs.test_result }}" >> $GITHUB_STEP_SUMMARY
        echo "Test Success Percentage: ${{ steps.postman-tests.outputs.test_result }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.postman-tests.outputs.test_result }}" -lt 80 ]; then
          echo "Warning: Test success percentage is below 80%. Please check the test results." >> $GITHUB_STEP_SUMMARY
        fi
